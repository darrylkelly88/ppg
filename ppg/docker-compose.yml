version: '3.1'

services:
  
  # NGINX Proxy Manager
  # Proxies between various containers
  #
  #
  # https://github.com/NginxProxyManager/nginx-proxy-manager
  nginx-proxy-manager:
    container_name: nginx
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      # These ports are in format <host-port>:<container-port>
      - '80:80' # Public HTTP Port
      - '443:443' # Public HTTPS Port
      - '81:81' # Admin Web Port
      # Add any other Stream port you want to expose
      # - '21:21' # FTP
    environment:
      # Mysql/Maria connection parameters:
      DB_MYSQL_HOST: "npm_db"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD: "npm"
      DB_MYSQL_NAME: "npm"
      # Uncomment this if IPv6 is not enabled on your host
      # DISABLE_IPV6: 'true'
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
    depends_on:
      - npm_db
    networks:
      - npm_db_network
      - web_network
      - marketing_mautic_network
      - matomo_network
      - link_management_kutt_network
    healthcheck:
      test: ["CMD", "curl", "-f", "https://perfectpetguides.co.uk/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  npm_db:
    container_name: npm_db_container
    image: 'jc21/mariadb-aria:latest'
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 'npm'
      MYSQL_DATABASE: 'npm'
      MYSQL_USER: 'npm'
      MYSQL_PASSWORD: 'npm'
    volumes:
      - npm_db:/var/lib/mysql
    networks:
      - npm_db_network
    healthcheck:
      test: ["CMD", "mysqladmin", "--user=root", "--password=npm", "ping", "--silent"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s



  # Wordpress Site
  # Hosts the website
  #
  #
  # https://hub.docker.com/_/wordpress
  wordpress:
    depends_on:
      - wp_db
    container_name: wordpress
    image: wordpress
    restart: always
    environment:
      WORDPRESS_DB_HOST: wp_db
      WORDPRESS_DB_USER: wpuser
      WORDPRESS_DB_PASSWORD: wppass
      WORDPRESS_DB_NAME: wpdb
    volumes:
      - ./PetWeb-Template:/var/www/html/wp-content/themes/PetWeb-Template
      - wordpress:/var/www/html
      - ./uploads.ini:/usr/local/etc/php/conf.d/uploads.ini
    networks:
      - web_network
      - wp_db_network
      - food_calc_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  wp_db:
    container_name: wp_db_container
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_DATABASE: wpdb
      MYSQL_USER: wpuser
      MYSQL_PASSWORD: wppass
      MYSQL_RANDOM_ROOT_PASSWORD: '1'
    volumes:
      - wp_db:/var/lib/mysql
    networks:
      - wp_db_network
    healthcheck:
      test: ["CMD", "mysqladmin", "--user=wpuser", "--password=wppass", "ping", "--silent"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s


  
  
  # Mailservers
  # 
  # Documentation: https://docker-mailserver.github.io/docker-mailserver/latest/
  # https://github.com/docker-mailserver/docker-mailserver/
  mailserver:
    image: ghcr.io/docker-mailserver/docker-mailserver:latest
    container_name: mailserver
    # Provide the FQDN of your mail server here (Your DNS MX record should point to this value)
    # In godaddy the name needs to be @ while the value is the defined subdomain. This means when the main domain has a look up it will return the subdomain as the mail server.
    hostname: mail.perfectpetguides.co.uk
    env_file: mailserver.env
    # More information about the mail-server ports:
    # https://docker-mailserver.github.io/docker-mailserver/latest/config/security/understanding-the-ports/
    # To avoid conflicts with yaml base-60 float, DO NOT remove the quotation marks.
    ports:
      - "25:25"    # SMTP  (explicit TLS => STARTTLS, Authentication is DISABLED => use port 465/587 instead)
      - "143:143"  # IMAP4 (explicit TLS => STARTTLS)
      - "465:465"  # ESMTP (implicit TLS)
      - "587:587"  # ESMTP (explicit TLS => STARTTLS)
      - "993:993"  # IMAP4 (implicit TLS)
    volumes:
      - mail-data:/var/mail/
      - mail-state:/var/mail-state/
      - mail-logs:/var/log/mail/
      - mail-config:/tmp/docker-mailserver/
      #Certs for mail server are managed by Nginx Proxy Manager. In this config it is the 6th cert it manages.
      - ./letsencrypt/live/npm-6/cert.pem:/etc/letsencrypt/live/mail.perfectpetguides.co.uk/mail.perfectpetguides.co.uk-cert.pem
      - ./letsencrypt/live/npm-6/privkey.pem:/etc/letsencrypt/live/mail.perfectpetguides.co.uk/mail.perfectpetguides.co.uk-key.pem
      #Enable container to read localtime
      - /etc/localtime:/etc/localtime:ro
    restart: always
    stop_grace_period: 1m
    # Uncomment if using `ENABLE_FAIL2BAN=1`:
    # cap_add:
    #   - NET_ADMIN
    healthcheck:
      test: "ss --listening --tcp | grep -P 'LISTEN.+:smtp' || exit 1"
      timeout: 3s
      retries: 0
    networks:
      - marketing_mautic_network
      - link_management_kutt_network



  # Marketing Automation
  #
  #
  #
  # https://hub.docker.com/r/mautic/mautic/

  marketing_mautic:
    container_name: marketing_mautic
    depends_on: 
      - marketing_mautic_db
    image: mautic/mautic:v4-apache
    volumes:
      - marketing_mautic_data:/var/www/html
      - ./mautic/mautic:/etc/cron.d/mautic
    environment:
      - MAUTIC_DB_HOST=marketing_mautic_db
      - MAUTIC_DB_USER=root
      - MAUTIC_DB_PASSWORD=mypassword
      - MAUTIC_DB_NAME=mautic4
    restart: always
    # To connect to mailserver they must be on the same network. Mailserver must also have the permit_docker env variable set.
    networks:
      - marketing_mautic_network
      - marketing_mautic_db_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  marketing_mautic_db:
    image: powertic/percona-docker
    container_name: marketing_mautic_db
    environment:
      MYSQL_ROOT_PASSWORD: mypassword
    volumes:
      - marketing_mautic_db:/var/lib/mysql
    restart: always
    networks:
      - marketing_mautic_db_network
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --sql-mode=""
    healthcheck:
      test: ["CMD", "mysqladmin", "--user=root", "--password=mypassword", "ping", "--silent"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    

# Analytics & Tracking
#
#
#
# https://github.com/matomo-org/docker/blob/master/.examples/apache/docker-compose.yml

  matomo_db:
    container_name: analytics_matomo_db
    image: mariadb:10.11
    command: --max-allowed-packet=64MB
    restart: always
    volumes:
      - matomo_db:/var/lib/mysql:Z
    environment:
        - MYSQL_ROOT_PASSWORD=matomo
        - MARIADB_DISABLE_UPGRADE_BACKUP=1
        - MYSQL_PASSWORD=matomo
        - MYSQL_DATABASE=matomo
        - MYSQL_USER=matomo
        - MATOMO_DATABASE_ADAPTER=mysql
        - MATOMO_DATABASE_TABLES_PREFIX=matomo_
        - MATOMO_DATABASE_USERNAME=matomo
        - MATOMO_DATABASE_PASSWORD=
        - MATOMO_DATABASE_DBNAME=matomo
        - MARIADB_AUTO_UPGRADE=1
        - MARIADB_INITDB_SKIP_TZINFO=1
    networks:
      - matomo_db_network
    healthcheck:
      test: ["CMD", "mysqladmin", "--user=root", "--password=matomo", "ping", "--silent"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s



  matomo:
    container_name: analytics_matomo
    image: matomo
    restart: always
    volumes:
#     - ./config:/var/www/html/config:z
#     - ./logs:/var/www/html/logs:z
      - matomo:/var/www/html:z
    environment:
      - MATOMO_DATABASE_HOST=matomo_db
      - MYSQL_ROOT_PASSWORD=matomo
      - MARIADB_DISABLE_UPGRADE_BACKUP=1
      - MYSQL_PASSWORD=matomo
      - MYSQL_DATABASE=matomo
      - MYSQL_USER=matomo
      - MATOMO_DATABASE_ADAPTER=mysql
      - MATOMO_DATABASE_TABLES_PREFIX=matomo_
      - MATOMO_DATABASE_USERNAME=matomo
      - MATOMO_DATABASE_PASSWORD=
      - MATOMO_DATABASE_DBNAME=matomo
      - MARIADB_AUTO_UPGRADE=1
      - MARIADB_INITDB_SKIP_TZINFO=1
    networks:
      - matomo_network
      - matomo_db_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s





# Pet Food Calculator
#
#
#
  food_calc_db:
    container_name: food_calc_db
    image: mongo:4.4.27
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - food_calc_db_network
    volumes:
      - food_calc_db:/data/db


  food_calc:
    container_name: food_calc
    image: express-dog-food-calculator
    networks:
      - food_calc_db_network
      - food_calc_network
    environment:
    - MONGO_USER=root
    - MONGO_PASSWORD=example
    - MONGO_HOST=food_calc_db
    - MONGO_PORT=27017
    - MONGO_DB_NAME=petweb
    - MONGO_COLLECTION_NAME=foods
    - MONGO_CORS=http://192.168.1.130


  mongo-gui:
    container_name: "mongo-gui"
    image: ugleiton/mongo-gui
    restart: always
    networks:
      - food_calc_db_network
      - web_network
    environment:
      - MONGO_URL=mongodb://root:example@food_calc_db:27017


# Link management software
#
#
# https://github.com/thedevs-network/kutt


  link_management_kutt:
    container_name: link_management_kutt
    image: kutt/kutt
    depends_on:
      - link_management_kutt_redis
      - link_management_kutt_postgres
    command: ["./wait-for-it.sh", "postgres:5432", "--", "npm", "start"]
    env_file:
      - linkManagement.env
    environment:
      DB_HOST: link_management_kutt_postgres
      DB_NAME: kutt
      DB_USER: user
      DB_PASSWORD: pass
      REDIS_HOST: link_management_kutt_redis
    networks:
      - link_management_kutt_network
      - link_management_kutt_backend_network

  link_management_kutt_redis:
    container_name: link_management_kutt_redis
    image: redis:6.0-alpine
    volumes:
      - link_management_kutt_redis_data:/data
    networks:
      - link_management_kutt_backend_network

  link_management_kutt_postgres:
    container_name: link_management_kutt_postgres
    image: postgres:12-alpine
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: kutt
    volumes:
      - link_management_kutt_postgres_data:/var/lib/postgresql/data
    networks:
      - link_management_kutt_backend_network





#Volumes & Netorks to create
#
#
#

volumes:
  wordpress:
  wp_db:
  npm_db:
  mail-data:
  mail-state:
  mail-logs:
  mail-config:
  marketing_mautic_db:
  marketing_mautic_data:
  matomo:
  matomo_db:
  food_calc_db:
  link_management_kutt_redis_data:
  link_management_kutt_postgres_data:



networks:
  web_network:
  wp_db_network:
  npm_db_network:
  marketing_mautic_network:
  marketing_mautic_db_network:
  matomo_network:
  matomo_db_network:
  food_calc_db_network:
  food_calc_network:
  link_management_kutt_network:
  link_management_kutt_backend_network:
